// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserIpService.Database;

#nullable disable

namespace UserIpService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserIpService.Models.IpAddress", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.HasKey("Address");

                    b.ToTable("IpAddresses");
                });

            modelBuilder.Entity("UserIpService.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserIpService.Models.UserIp", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddressId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ConnectionTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "IpAddressId");

                    b.HasIndex("IpAddressId");

                    b.ToTable("UserIps");
                });

            modelBuilder.Entity("UserIpService.Models.UserIp", b =>
                {
                    b.HasOne("UserIpService.Models.IpAddress", "IpAddress")
                        .WithMany("UserIps")
                        .HasForeignKey("IpAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserIpService.Models.User", "User")
                        .WithMany("UserIps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IpAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserIpService.Models.IpAddress", b =>
                {
                    b.Navigation("UserIps");
                });

            modelBuilder.Entity("UserIpService.Models.User", b =>
                {
                    b.Navigation("UserIps");
                });
#pragma warning restore 612, 618
        }
    }
}
